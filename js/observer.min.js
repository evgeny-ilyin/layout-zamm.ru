(()=>{"use strict";window.blockObserver||(window.blockObserver=(e=!1)=>{const t=new IntersectionObserver(((e,t)=>{e.forEach((e=>{if(e.isIntersecting){let a=e.target,s=a.dataset.url,o={},n={};if(!s)return;a.dataset.params&&(n=JSON.parse(a.dataset.params)),Object.assign(o,n),(async()=>{try{fetchLoader(a,"start",{class:"_sm"});let e=await fetch(s,{method:"POST",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify(o)});if(!e.ok)return;let t=await e.json();!0===t.status&&(a.innerHTML=t.content),t.svg&&addToSvgSprite(t.svg),r(a),fetchLoader(a,"stop")}catch(e){return void console.error(e)}})(),t.unobserve(e.target)}}))}),{});(e?e.querySelectorAll("[data-fetch='true']"):document.querySelectorAll("[data-fetch='true']")).forEach((e=>t.observe(e)));let r=e=>{try{productBlockCollapseHandler(),carouselsInit(e),catalogItemGalleriesInit(),catalogItemGalleryHandler(),tabsInit(),tabsHandler(e),productPropsHoverHandler(),setFavourites()}catch(e){}}}),addEventListener("DOMContentLoaded",(()=>{blockObserver()}))})();